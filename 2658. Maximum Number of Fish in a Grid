class Solution {
    private int dfs(int[][] grid, int i, int j, boolean[][] visited) {
        int n = grid.length;
        int m = grid[0].length;
        if (i < 0 || i >= n || j < 0 || j >= m || grid[i][j] <= 0 || visited[i][j]) {
            return 0;
        }
        visited[i][j] = true;
        int fish = grid[i][j];
        fish += dfs(grid, i + 1, j, visited);
        fish += dfs(grid, i - 1, j, visited);
        fish += dfs(grid, i, j + 1, visited);
        fish += dfs(grid, i, j - 1, visited);

        return fish;
    }

    public int findMaxFish(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        boolean[][] visited = new boolean[n][m];
        int maxFish = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] > 0 && !visited[i][j]) {
                    maxFish = Math.max(maxFish, dfs(grid, i, j, visited));
                }
            }
        }

        return maxFish;
    }
}
